@startuml

class GameController {
public:
    GameController();
    void Run();

private:
    std::vector<std::unique_ptr<Window>> m_screens;
    enum ScreenType_t m_currentScreen;
}

abstract class Screen {
public:
    Window();
    virtual enum ScreenType_t display(sf::RenderWindow &) = 0;
    virtual void draw(sf::RenderWindow &) = 0;
    virtual void Music() = 0;

private:
}

class MainMenu{
public:
    virtual enum ScreenType_t display(sf::RenderWindow &) override;
    virtual void draw(sf::RenderWindow &) override;
    virtual void Music() override;
private:
    std::vector<Button> m_menu;
    void handleMouseMove(sf::RenderWindow & Window, const sf::Vector2f & location);
}

class GamePlay{
public:
    virtual enum ScreenType_t display(sf::RenderWindow &) override;
    virtual void draw(sf::RenderWindow &) override;
    virtual void Music() override;
private:
    size_t m_lastHouse;
    sf::Clock m_clock;
    std::vector<std::unique_ptr<Home>> m_homes;
}

class StageDetails{
public:
    void draw(sf::RenderWindow &, const Player &);

private:
    int m_stageNumber;
}

class Button{
    void draw(sf::RenderWindow &);
    bool checkPressed(const sf::Vector2f &);
    void setOutlineThickness(int);

private:
    sf::Text m_text;
    sf::RectangleShape m_frame;
}

class House{
public:

private:
    b2World m_world;
    std::unique_ptr<Player> m_player;
    std::vector<unique_ptr<Enemy>> m_enemies;
    std::vector<std::vector<std::unique_ptr<StaticObject>>> m_staticObjects;
}

class Room{
public:

private:
    std::unique_ptr<Mission> m_mission;
    std::vector<unique_ptr<Enemy>> m_enemies;
    std::vector<unique_ptr<Furniture>> m_furniture;
}

abstract class GameObject{
public:
    const sf::Vector2i & getPosition () const;
    virtual void draw (sf::RenderWindow &) const;
    void setPosition(const float &, const sf::Vector2f & , const sf::Vector2f &);
    bool checkCollision(const GameObject &);

    virtual void handleCollision(const GameObject &);

protected:
    b2Body * m_body;
    sf::Sprite m_sprite;

private:

    sf::Vector2f m_pos;
    std::unique_ptr<Animation> m_animation;
}

Abstract class MovingObject{
public:
    virtual void move(const float &) = 0;
    virtual void setDirection(const sf::Keyboard::Key &);
    const sf::Vector2f getDirection () const;
    const sf::Vector2f getScale () const;


private:
    sf::Vector2f m_direction;
    sf::Vector2f m_scale; //used to reflect the sprite with setScale.
}

abstract class StaticObject{
public:
    //----------Constructors\Destructors Section----------
    StaticObject(const sf::Sprite & sprite, const sf::Vector2f & pos, b2World &,
                 std::unique_ptr<Animation> = nullptr);
private:
    b2BodyDef m_bodyDef;
}

class TakenObject{
public:
    TakenObject(const sf::Sprite &sprite , const sf::Vector2f &pos, b2World & world, b2BodyType,
                std::unique_ptr<Animation> animation);

    bool isTaken() const {return m_taken;}
    void take() {m_taken = true;}

private:
    bool m_taken = false;
};

abstract class TakenObject{
public:
    virtual void activate() = 0;
}

class Furniture{}

class Box{
public:
    Box(const sf::Vector2f &, b2World &);

    Objects_t getBodyType() const override {return BOX;}
private:
};

class Player{
public:
    Player(const sf::Vector2f& pos, b2World&);
    AnimationStatus move();
private:
    std::Pair<int, int> m_lives;
    Weapon m_weapon;
    std::Vector<std::unique_ptr<Bullet>>;
}

note bottom
"m_live -> First = lives, Second = HP"
end note

abstract class Enemy{
public:
private:
    int m_hp;
}

class ShootEnemy{
public:
    virtual void move(const float &) override;
private:
    int m_lives;
    Weapon m_weapon;
    std::Vector<std::unique_ptr<Bullet>>;
}

class KnightEnemy{
public:
    virtual void move(const float &) override;
private:
    int m_lives;
}

class Mission{}

abstract class Weapon{
public:

private:
    int m_fireRate;
}

class Sword{
public:
    void swing();
private:
}

class Gun{
public:
    void fire();
    void reload();

private:
    float m_fireRate;
}

class Bullet{
public:

private:
    int m_damageRate;
}

class Key{
public:
    //----------Constructors\Destructors Section----------
    Key(const sf::Vector2f& , b2World&);
    Objects_t getBodyType() const override {return KEY;}

private:
};

abstract class Gift{}

abstract class GoodGift{}

abstract class BadGift{}

class AmmoGift{
public:
    virtual void activate();
private:
}

class LiveGift{
public:
    virtual void activate();
private:
}

class SpeedGift{
public:
    virtual void activate();
private:
}

class RandomGift{
public:
    virtual void activate();
private:
}

class Sounds{
public:
static Sounds & soundObject();
    void playSound(enum Sounds_t);
    void stopSound(enum Sounds_t);
    bool checkSoundPlay(enum Sounds_t);

private:
    //--------------------Constructor/Destructor Section--------------------
    Sounds();
    Sounds(const Sounds &) = default;
    Sounds & operator=(const Sounds &) = default;


    std::vector<sf::SoundBuffer> m_soundBuffer;
    std::vector<sf::Sound> m_sounds;
}

class Textures{
public:

    static Textures & texturesObject();

    //--------------------Get Function Section--------------------
    const sf::Texture & getTexture(enum Textures_t);
    const sf::Sprite getSprite(enum Textures_t);
    const AnimationData & animationData(ObjectsData_t objectsData) {return m_animationsData[objectsData];}

private:
    std::vector<sf::Texture> m_textures;
    std::vector<AnimationData> m_animationsData;

    //--------------------Constructor/Destructor Section--------------------
    Textures();
    Textures(const Textures &) = default;
    Textures& operator=(const Textures &) = default;
}

class Font {
public:
    //--------------------Constructor/Destructor Section--------------------
    static Font& FontObject();

    //--------------------Get Function Section--------------------
    const sf::Font & getFont () const;

private:
    sf::Font m_font;

    //--------------------Constructor/Destructor Section--------------------
    Font();
    Font(const Font &) = default;
    Font& operator=(const Font &) = default;
};

class HousesFile {
public:
    HousesFile(const std::string &);

    std::string readLine();
    std::pair<constIterToVecStr ,constIterToVecStr> getHouse();
    bool eof() const;

private:
    int m_currLine;
    std::vector<std::string> m_fileContent;
};

enum ScreenType_t
{
MAIN_MENU,
GAME_PLAY,
EXIT
}

enum Objects_t
{
PLAYER = 'P',
ENEMY = 'E',
WALL = '#',
BOX = 'B',
DOOR = 'D',
KEY= 'K'
}

enum ObjectsData_t
{
PLAYER_D,
KEY_D,
ENEMY_D
}

enum Textures_t
{
PLAYER_T = 0,
WALL_T,
KEY_T,
ENEMY_T,
BOX_T,
DOOR_T
}

enum Sounds_t
{
}

Screen <-- MainMenu
Screen <-- GamePlay
GameObject <-- MovingObject
GameObject <-- StaticObject
MovingObject <-- Player
MovingObject <-- Enemy
MovingObject <-- Bullet
StaticObject <-- TakenObject
StaticObject <-- Furniture
StaticObject <-- Weapon
TakenObject <-- Gift
TakenObject <-- Key
Enemy <-- KnightEnemy
Enemy <-- ShootEnemy
Weapon <-- Sword
Weapon <-- Gun
Gift <-- GoodGift
Gift <-- BadGift
Gift <-- RandomGift
GoodGift <-- AmmoGift
GoodGift <-- LiveGift
GoodGift <-- SpeedGift

@enduml